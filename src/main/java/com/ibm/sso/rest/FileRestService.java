package com.ibm.sso.rest;

import com.aef3.data.SortUtil;
import com.aef3.data.api.qbe.SortObject;
import com.aef3.data.api.qbe.StringSearchType;
import com.ibm.sso.common.BusinessExceptionCode;
import com.ibm.sso.dto.FileObjectDto;
import com.ibm.sso.dto.FileUploadResponseDto;
import com.ibm.sso.dto.SecurityRoleDto;
import com.ibm.sso.jwt.JWTUtil;
import com.ibm.sso.jwt.SecurityWrapper;
import com.ibm.sso.service.FileService;
import com.ibm.sso.service.SecurityService;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import com.ibm.sso.service.PagedResult;

import java.io.IOException;

import org.springframework.security.access.annotation.Secured;
import com.ibm.sso.security.AccessRoles;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;


/* Generated By AEF Generator ( Powered by Dr.Adldoost :D ) */

@RestController
@RequestMapping("/file")
public class FileRestService {

    private final FileService fileService;
    private final Logger logger;

    @Autowired
    public FileRestService(FileService fileService, Logger logger) {
        this.fileService = fileService;
        this.logger = logger;
    }

    @Secured(AccessRoles.ROLE_FIND_FILE)
    @GetMapping("/{id}")
    public FileObjectDto findById(@PathVariable(name = "id")Long id) {
        return fileService.findByPrimaryKey(id);
    }

    @Secured(AccessRoles.ROLE_SEARCH_FILE)
    @GetMapping("/search")
    public PagedResult search(
                                      @RequestParam(value = "address", required = false) String address,
                                      @RequestParam(value = "name", required = false) String name,
                                      @RequestParam(value = "description", required = false) String description,
                                      @RequestParam(value = "id", required = false) Long id,
                                      @RequestParam(value = "title", required = false) String title,
                                      @RequestParam(value = "roleObject", required = false) String roleObject,
                                      @RequestParam(value = "firstIndex", required = false) Integer firstIndex,
                                      @RequestParam(value = "pageSize", required = false) Integer pageSize,
                                      @RequestParam(value = "sortField", required = false) String sortField,
                                      @RequestParam(value = "sortOrder", required = false) String sortOrder) {

            SortObject sortObject = SortUtil.generateSortObject(sortField, sortOrder);
            List<SortObject> sortObjectList = null;
            if(sortObject != null)
               sortObjectList = Collections.singletonList(sortObject);

            if(firstIndex == null)
               firstIndex = 0;
            if(pageSize == null)
               pageSize = Integer.MAX_VALUE;
            FileObjectDto file = new FileObjectDto();
            file.setPath(address);
            file.setName(name); 
            file.setDescription(description); 
            file.setId(id); 
            file.setTitle(title); 
            file.setRoleObject(roleObject); 

            return fileService.findPagedByExample(file,
                   sortObjectList,
                   firstIndex,
                   pageSize,
                   StringSearchType.EXPAND_BOTH_SIDES,
                   null,
                   null
                   );
    }


    @Secured(AccessRoles.ROLE_SAVE_FILE)
    @PostMapping(path = "/save")
    public FileObjectDto save(@RequestBody FileObjectDto file) {
        return fileService.save(file);
    }


    @Secured(AccessRoles.ROLE_REMOVE_FILE)
    @DeleteMapping(path = "/remove/{id}")
    public void remove(@PathVariable(name = "id")Long id) {
        fileService.remove(id);
    }


    @GetMapping("/download-file/{id}")
    public ResponseEntity<Resource> downloadFile(@PathVariable long id, HttpServletRequest request) {


        FileObjectDto fileObjectDto = fileService.findByPrimaryKey(id);

        String jwt = request.getHeader(HttpHeaders.AUTHORIZATION);
        SecurityWrapper securityWrapper = JWTUtil.getSecurityWrapperFromToken(jwt);

        List<String> result = Arrays.asList(fileObjectDto.getRoleObject().split("\\s*,\\s*"));
        if(!securityWrapper.hasAnyRole(result))
            throw new AccessDeniedException(BusinessExceptionCode.ACCESS_DENIED.name());

        // Load file as Resource
        Resource resource = fileService.findResourceByFileId(id);

        // Try to determine file's content type
        String contentType = null;
        try {
            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
        } catch (IOException ex) {
            logger.info("Could not determine file type.");
        }

        // Fallback to the default content type if type could not be determined
        if(contentType == null) {
            contentType = "application/octet-stream";
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .header("file_name", fileObjectDto.getName())
                .body(resource);
    }

    @PostMapping(path = "/upload-file")
    public @ResponseBody FileUploadResponseDto saveFile(@RequestParam("file") MultipartFile file,
                                                        @RequestParam(required = false) String title,
                                                        @RequestParam(required = false) String accessRoleNames) throws IOException {

        return fileService.saveFile(file, title, accessRoleNames);

    }
}