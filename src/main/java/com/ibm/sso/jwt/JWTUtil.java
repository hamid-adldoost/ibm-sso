package com.ibm.sso.jwt;

import com.ibm.sso.common.BusinessExceptionCode;
import com.ibm.sso.common.InitializrReaderUtility;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.util.StringUtils;

import java.util.*;

/**
 * @author Generated By AEF3 frameword, powered by Dr.Adldoost :D 
 */
public class JWTUtil {

    static String secret = InitializrReaderUtility.getResourceProperity("jwtkey");

    static long expiration = Long.parseLong(InitializrReaderUtility.getResourceProperity("jwtExpiration"));

    public static String getUsernameFromToken(String token) {
        if(token.startsWith("Bearer ")) {
            token = token.substring(7, token.length());
        }
        String username;
        final Claims claims = getClaimsFromToken(token);
        if (claims == null)
            throw new RuntimeException("Invalid token Exception");
        username = claims.getSubject();
        return username;
    }

    public static String getCustomKeyFromToken(String token, String key) {
        if(token.startsWith("Bearer ")) {
            token = token.substring(7, token.length());
        }
        String result;
        final Claims claims = getClaimsFromToken(token);
        if (claims == null)
            throw new RuntimeException("Invalid token Exception");
        result = (String)claims.get(key);
        return result;
    }

    public static Date getCreatedDateFromToken(String token) {
        if(token.startsWith("Bearer ")) {
            token = token.substring(7, token.length());
        }
        Date created;
        try {
            final Claims claims = getClaimsFromToken(token);
            created = new Date((Long) claims.get(Claims.ISSUED_AT));
        } catch (Exception e) {
            created = null;
            throw new RuntimeException(BusinessExceptionCode.JWT_PARSE_EXCEPTION.name());
        }
        return created;
    }

    public static Date getExpirationDateFromToken(String token) {
        if(token.startsWith("Bearer ")) {
            token = token.substring(7, token.length());
        }
        Date expiration;
        try {
            final Claims claims = getClaimsFromToken(token);
            expiration = claims.getExpiration();
        } catch (Exception e) {
            expiration = null;
            throw new RuntimeException(BusinessExceptionCode.JWT_PARSE_EXCEPTION.name());
        }
        return expiration;
    }

    private static Claims getClaimsFromToken(String token) {
        if(token.startsWith("Bearer ")) {
            token = token.substring(7, token.length());
        }
        Claims claims;
        try {
            claims = Jwts.parser()
                    .setSigningKey(secret)
                    .parseClaimsJws(token)
                    .getBody();
        } catch (Exception e) {
            claims = null;
            throw new RuntimeException(BusinessExceptionCode.JWT_PARSE_EXCEPTION.name());
        }
        return claims;
    }

    public static SecurityWrapper getSecurityWrapperFromToken(String token) {

        if(token.startsWith("Bearer ")) {
            token = token.substring(7, token.length());
        }
        Claims claims = getClaimsFromToken(token);
        SecurityWrapper securityWrapper = new SecurityWrapper();
        securityWrapper.setUsername(claims.getSubject());
        securityWrapper.setSecure(true);
        String perms = (String)claims.get(CustomClaims.PERMISSIONS);
        securityWrapper.setPermissions(convertCommaSeperatedToList(perms));
        String sRoles = (String) claims.get(CustomClaims.ROLES);
        securityWrapper.setRoles(convertCommaSeperatedToList(sRoles));
        securityWrapper.setFreshToken("Bearer " + token);
        return securityWrapper;
    }

    public static List<String> convertCommaSeperatedToList(String str) {
        String parts[] = StringUtils.commaDelimitedListToStringArray(str);
        if(parts == null || parts.length == 0) {
            return null;
        }
        else
        {
            return Arrays.asList(parts);
        }
    }

    private static Date generateExpirationDate() {
        return new Date(System.currentTimeMillis() + expiration * 1000);
    }

    private static Boolean isTokenExpired(String token) {
        final Date expiration = getExpirationDateFromToken(token);
        return expiration.before(new Date());
    }

    public static String generateToken(JWTUserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        claims.put(Claims.SUBJECT, userDetails.getUsername());
        claims.put(Claims.AUDIENCE, "web");
        claims.put(Claims.ISSUED_AT, new Date());
        claims.put(Claims.ISSUER, "faraz-sso");
        claims.put(CustomClaims.PERMISSIONS, StringUtils.collectionToCommaDelimitedString(userDetails.getPermissions()));
        claims.put(CustomClaims.ROLES, StringUtils.collectionToCommaDelimitedString(userDetails.getRoles()));
        return generateToken(claims);
    }

    public static String generateCustomToken(Map<String, String> map) {
        Map<String, Object> claims = new HashMap<>();
        for (Map.Entry<String, String> entry : map.entrySet())
        {
            claims.put(entry.getKey(), entry.getValue());
        }
        return generateToken(claims);
    }

    private static String generateToken(Map<String, Object> claims) {
        return Jwts.builder()
                .setClaims(claims)
                .setExpiration(generateExpirationDate())
                .signWith(SignatureAlgorithm.HS512, secret)
                .compact();
    }


    public static String refreshToken(String token) {
        if(token.startsWith("Bearer ")) {
            token = token.substring(7, token.length());
        }
        String refreshedToken;
        final Claims claims = getClaimsFromToken(token);
        claims.put(Claims.EXPIRATION, generateExpirationDate());
        refreshedToken = generateToken(claims);

        return refreshedToken;
    }

    public static Boolean validateToken(String token, String username) {
        final String tokenUsername = getUsernameFromToken(token);
        return (tokenUsername.equals(username)
                && !isTokenExpired(token));
    }

    public static Boolean canTokenBeRefreshed(String token, Date lastPasswordReset) {
        return (!isTokenExpired(token));
    }
}