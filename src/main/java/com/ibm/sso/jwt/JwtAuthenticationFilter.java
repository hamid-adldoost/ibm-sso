package com.ibm.sso.jwt;


// Generated by AEF3 framework, powered by Dr.Adldoost :D
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ibm.sso.common.BusinessExceptionCode;
import com.ibm.sso.common.ErrorCodeReaderUtil;
import com.ibm.sso.common.RestErrorMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Date;

public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final TokenRepository tokenRepository;

    @Autowired
    public JwtAuthenticationFilter(TokenRepository tokenRepository) {
        this.tokenRepository = tokenRepository;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {

        try {
            String jwt = request.getHeader(HttpHeaders.AUTHORIZATION);
            SecurityWrapper securityWrapper = JWTUtil.getSecurityWrapperFromToken(jwt);

            Date repositoryDate = tokenRepository.getTokenIssueDate(securityWrapper.getUsername());
            Date jwtTokenIssueDate = JWTUtil.getCreatedDateFromToken(jwt);

            if(repositoryDate != null) {
                if(jwtTokenIssueDate.after(repositoryDate))
                    tokenRepository.put(securityWrapper.getUsername(), jwtTokenIssueDate);
                else if(jwtTokenIssueDate.before(repositoryDate))
                    throw new RuntimeException(BusinessExceptionCode.INVALID_LOGIN_TOKEN.name());
            } else {
                tokenRepository.put(securityWrapper.getUsername(), jwtTokenIssueDate);
            }


            JwtAuthenticationToken authentication = new JwtAuthenticationToken(securityWrapper);

            SecurityContextHolder.getContext().setAuthentication(authentication);

            response.setHeader(HttpHeaders.AUTHORIZATION, JWTUtil.refreshToken(jwt));

            filterChain.doFilter(request, response);

            Date novelJWTIssueDate = JWTUtil.getCreatedDateFromToken(jwt);

            //invalidate all older tokens
            tokenRepository.put(securityWrapper.getUsername(), novelJWTIssueDate);
        }
        catch (Exception e) {
            response.setStatus(HttpStatus.UNAUTHORIZED.value());
            response.setContentType("text/html; charset=UTF-8");
            response.setCharacterEncoding("UTF-8");
            String errorMessage = ErrorCodeReaderUtil.getResourceProperity("UNAUTHORIZED");
            Integer code = 0;
            response.getWriter().write(convertObjectToJson(new RestErrorMessage(errorMessage, code)));
        }
    }

    private String getJwtFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader(HttpHeaders.AUTHORIZATION);
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7, bearerToken.length());
        }
        return null;
    }

    public String convertObjectToJson(Object object) throws JsonProcessingException {
        if (object == null) {
            return null;
        }
        ObjectMapper mapper = new ObjectMapper();
        return mapper.writeValueAsString(object);
    }
}
