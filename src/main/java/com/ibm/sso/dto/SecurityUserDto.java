package com.ibm.sso.dto;

import com.aef3.data.api.DomainDto;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.ibm.sso.model.SecurityPermission;
import com.ibm.sso.model.SecurityUser;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/* Generated By AEF Generator ( Powered by Dr.Adldoost :D ) */

public class SecurityUserDto implements DomainDto<SecurityUser, SecurityUserDto> {


    private Date lastLogin;
    private String password;
    private String suspensionCode;
    private String mobile;
    private Long id;
    private Integer failureCount;
    private String email;
    private String username;
    private Integer status;
    private List<SecurityRoleDto> roleList;
    private List<SecurityPermissionDto> permissionList;
    private Date creationDate;
 

    public Date getLastLogin() {
        return lastLogin;
    }
    public void setLastLogin(Date lastLogin) {
        this.lastLogin = lastLogin;
    }

    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }

    public String getSuspensionCode() {
        return suspensionCode;
    }
    public void setSuspensionCode(String suspensionCode) {
        this.suspensionCode = suspensionCode;
    }

    public String getMobile() {
        return mobile;
    }
    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }

    public Integer getFailureCount() {
        return failureCount;
    }
    public void setFailureCount(Integer failureCount) {
        this.failureCount = failureCount;
    }

    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }

    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }

    public Integer getStatus() {
        return status;
    }
    public void setStatus(Integer status) {
        this.status = status;
    }

    public List<SecurityRoleDto> getRoleList() {
        return roleList;
    }

    public void setRoleList(List<SecurityRoleDto> roleList) {
        this.roleList = roleList;
    }

    public List<SecurityPermissionDto> getPermissionList() {
        return permissionList;
    }

    public void setPermissionList(List<SecurityPermissionDto> permissionList) {
        this.permissionList = permissionList;
    }

    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    public static SecurityUserDto toDto(SecurityUser securityUser) {

        if(securityUser == null)
            return null; 
        SecurityUserDto dto = new SecurityUserDto();
        dto.setLastLogin(securityUser.getLastLogin());
        dto.setPassword(securityUser.getPassword());
        dto.setSuspensionCode(securityUser.getSuspensionCode());
        dto.setMobile(securityUser.getMobile());
        dto.setId(securityUser.getId());
        dto.setFailureCount(securityUser.getFailureCount());
        dto.setEmail(securityUser.getEmail());
        dto.setUsername(securityUser.getUsername());
        dto.setStatus(securityUser.getStatus());
        if(securityUser.getPermissionList() != null && !securityUser.getPermissionList().isEmpty()) {
            List<SecurityPermissionDto> dtoList = new ArrayList<>();
            securityUser.getPermissionList().forEach(p -> {
                dtoList.add(SecurityPermissionDto.toDto(p));
            });
            dto.setPermissionList(dtoList);
        }
        if(securityUser.getRoleList() != null && !securityUser.getRoleList().isEmpty()) {
            List<SecurityRoleDto> dtoList = new ArrayList<>();
            securityUser.getRoleList().forEach(r -> {
                dtoList.add(SecurityRoleDto.toDto(r));
            });
            dto.setRoleList(dtoList);
        }
        dto.setCreationDate(securityUser.getCreationDate());
        return dto;
  }


    public static SecurityUser toEntity(SecurityUserDto dto) {

        if(dto == null)
            return null; 
        SecurityUser securityUser = new SecurityUser();
        securityUser.setLastLogin(dto.getLastLogin());
        securityUser.setPassword(dto.getPassword());
        securityUser.setSuspensionCode(dto.getSuspensionCode());
        securityUser.setMobile(dto.getMobile());
        securityUser.setId(dto.getId());
        securityUser.setFailureCount(dto.getFailureCount());
        securityUser.setEmail(dto.getEmail());
        securityUser.setUsername(dto.getUsername());
        securityUser.setStatus(dto.getStatus());
//        if(dto.getPermissionList() != null && !dto.getPermissionList().isEmpty()) {
//            List<SecurityPermission> permissionList = new ArrayList<>();
//            dto.getPermissionList().forEach(p -> {
//                permissionList.add(p.toEntity());
//            });
//            securityUser.setPermissionList(permissionList);
//        }
        securityUser.setCreationDate(dto.getCreationDate());
        return securityUser;
  }
    @Override
    public SecurityUser toEntity() {
        return SecurityUserDto.toEntity(this);
    }

    @JsonIgnore
    @Override
    public SecurityUserDto getInstance(SecurityUser securityUser) {
        return SecurityUserDto.toDto(securityUser);
    }

    @JsonIgnore
    @Override
    public SecurityUserDto getInstance() {
        return new SecurityUserDto();
    }
}