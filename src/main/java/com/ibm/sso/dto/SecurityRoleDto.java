package com.ibm.sso.dto;

import com.aef3.data.api.DomainDto;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.ibm.sso.model.SecurityPermission;
import com.ibm.sso.model.SecurityRole;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/* Generated By AEF Generator ( Powered by Dr.Adldoost :D ) */

public class SecurityRoleDto implements DomainDto<SecurityRole, SecurityRoleDto> {


    private SecurityRoleDto parent;
    private String name;
    private Long id;
    private String title;
    private List<SecurityPermissionDto> permissionList;
 

    public SecurityRoleDto getParent() {
        return parent;
    }
    public void setParent(SecurityRoleDto parent) {
        this.parent = parent;
    }

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }
    public void setTitle(String title) {
        this.title = title;
    }

    public List<SecurityPermissionDto> getPermissionList() {
        return permissionList;
    }

    public void setPermissionList(List<SecurityPermissionDto> permissionList) {
        this.permissionList = permissionList;
    }

    public static SecurityRoleDto toDto(SecurityRole securityRole) {

        if(securityRole == null)
            return null; 
        SecurityRoleDto dto = new SecurityRoleDto();
        dto.setParent(SecurityRoleDto.toDto(securityRole.getParent()));
        dto.setName(securityRole.getName());
        dto.setId(securityRole.getId());
        dto.setTitle(securityRole.getTitle());
        List<SecurityPermissionDto> permissionDtoList;
        if(securityRole.getPermissionList() != null && !securityRole.getPermissionList().isEmpty()) {
            permissionDtoList = new ArrayList<>();
            securityRole.getPermissionList().forEach(p -> {
                permissionDtoList.add(SecurityPermissionDto.toDto(p));
            });
            dto.setPermissionList(permissionDtoList);
        }
        return dto;
  }


    public static SecurityRole toEntity(SecurityRoleDto dto) {

        if(dto == null)
            return null; 
        SecurityRole securityRole = new SecurityRole();
        if(dto.getParent() != null)
            securityRole.setParent(dto.getParent().toEntity());
        if(dto.getPermissionList() != null && !dto.getPermissionList().isEmpty()) {
            List<SecurityPermission> permissionList = new ArrayList<>();
            dto.getPermissionList().forEach(p -> {
                permissionList.add(p.toEntity());
            });
            securityRole.setPermissionList(permissionList);
        }
        securityRole.setName(dto.getName());
        securityRole.setId(dto.getId());
        securityRole.setTitle(dto.getTitle());
        return securityRole;
  }
    @Override
    public SecurityRole toEntity() {
        return SecurityRoleDto.toEntity(this);
    }

    @JsonIgnore
    @Override
    public SecurityRoleDto getInstance(SecurityRole securityRole) {
        return SecurityRoleDto.toDto(securityRole);
    }

    @JsonIgnore
    @Override
    public SecurityRoleDto getInstance() {
        return new SecurityRoleDto();
    }
}